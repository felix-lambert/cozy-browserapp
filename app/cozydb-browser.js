(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.cozydb = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var CozyBackedModel, Model, client, cozyDataAdapter,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  client = require('./utils/client');

  Model = require('./model');

  cozyDataAdapter = {
    find: function(id, callback) {
      return client.get("data/" + id + "/", function(error, response) {
        if (error) {
          return callback(error);
        } else if (response.statusCode === 404) {
          return callback(null, null);
        } else {
          return callback(null, response);
        }
      });
    },
    create: function(attributes, callback) {
      var path;
      path = "data/";
      if (attributes.id != null) {
        path += attributes.id + "/";
        delete attributes.id;
        return callback(new Error('cant create an object with a set id'));
      }
      return client.post(path, attributes, function(error, response) {
        if (error) {
          return callback(error);
        } else {
          response.id = response._id;
          return callback(null, response);
        }
      });
    }
  };

  module.exports = CozyBackedModel = (function(superClass) {
    extend(CozyBackedModel, superClass);

    function CozyBackedModel() {
      return CozyBackedModel.__super__.constructor.apply(this, arguments);
    }

    CozyBackedModel.adapter = cozyDataAdapter;

    CozyBackedModel.cast = function() {
      if (!this.__addedToSchema) {
        this.__addedToSchema = true;
        this.schema._id = String;
        this.schema._attachments = Object;
        this.schema._rev = String;
        this.schema.id = String;
        this.schema.docType = String;
      }
      return CozyBackedModel.__super__.constructor.cast.apply(this, arguments);
    };

    return CozyBackedModel;

  })(Model);

}).call(this);

},{"./model":3,"./utils/client":4}],2:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var CozyModel, Model, NoSchema,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  module.exports.Model = Model = require('./model');

  module.exports.CozyModel = CozyModel = require('./cozymodel');

  NoSchema = require('./utils/type_checking').NoSchema;

  module.exports.NoSchema = NoSchema;

  module.exports.getModel = function(name, schema) {
    var ClassFromGetModel, klass;
    window.parent.postMessage({
      action: 'getToken'
    }, '*');
    klass = ClassFromGetModel = (function(superClass) {
      extend(ClassFromGetModel, superClass);

      function ClassFromGetModel() {
        return ClassFromGetModel.__super__.constructor.apply(this, arguments);
      }

      ClassFromGetModel.schema = schema;

      return ClassFromGetModel;

    })(CozyModel);
    klass.displayName = klass.name = name;
    klass.toString = function() {
      return name + "Constructor";
    };
    klass.docType = name;
    return klass;
  };

}).call(this);

},{"./cozymodel":1,"./model":3,"./utils/type_checking":5}],3:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  var Model, castObject,
    hasProp = {}.hasOwnProperty;

  Model = (function() {
    Model.getDocType = function() {
      var ref;
      return ((ref = this.docType) != null ? ref.toLowerCase() : void 0) || this.name.toLowerCase();
    };

    Model.find = function(id, callback) {
      return this.adapter.find(id, (function(_this) {
        return function(err, attributes) {
          var ref;
          if (err) {
            return callback(err);
          } else if ((attributes != null ? (ref = attributes.docType) != null ? ref.toLowerCase() : void 0 : void 0) !== _this.getDocType()) {
            return callback(null, null);
          } else {
            return callback(null, new _this(attributes));
          }
        };
      })(this));
    };

    Model.create = function(data, callback) {
      data.docType = this.getDocType();
      data = this.cast(data);
      return this.adapter.create(data, (function(_this) {
        return function(err, attributes) {
          if (err) {
            return callback(err);
          }
        };
      })(this));
    };

    Model.cast = function(attributes, target) {
      if (target == null) {
        target = {};
      }
      return castObject(attributes, this.schema, target, this.name);
    };

    function Model(attributes) {
      if (attributes == null) {
        attributes = {};
      }
      this.constructor.cast(attributes, this);
      if (attributes._id) {
        if (this.id == null) {
          this.id = attributes._id;
        }
      }
    }

    Model.prototype.getAttributes = function() {
      var key, out, value;
      out = {};
      for (key in this) {
        if (!hasProp.call(this, key)) continue;
        value = this[key];
        out[key] = value;
      }
      return out;
    };

    Model.prototype.toJSON = function() {
      return this.getAttributes();
    };

    Model.prototype.toObject = function() {
      return this.getAttributes();
    };

    Model.prototype.toString = function() {
      return this.constructor.getDocType() + JSON.stringify(this.toJSON());
    };

    return Model;

  })();

  module.exports = Model;

  castObject = require('./utils/type_checking').castObject;

}).call(this);

},{"./utils/type_checking":5}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  module.exports = {
    get: function(path, callback) {
      var xhr;
      xhr = new XMLHttpRequest;
      xhr.open('GET', '/ds-api/#{path}/', true);
      xhr.onload = function() {
        callback(null, xhr.response);
      };
      xhr.onerror = function(e) {
        var err;
        err = 'Request failed : #{e.target.status}';
        callback(err);
      };
      xhr.setRequestHeader('Content-Type', 'application/json');
      return xhr.send();
    },
    post: function(path, attributes, callback) {
      var location, xhr;
      location = window.location;
      xhr = new XMLHttpRequest;
      xhr.open('POST', "/ds-api/" + path, true);
      xhr.onload = function() {
        callback(null, xhr.response);
      };
      xhr.onerror = function(e) {
        var err;
        err = 'Request failed : #{e.target.status}';
        callback(err);
      };
      return window.addEventListener('message', (function(event) {
        var intent, requestHeader;
        intent = event.data;
        xhr.setRequestHeader('Content-Type', 'application/json');
        requestHeader = 'Basic ' + btoa(intent.appName + ":" + intent.token);
        xhr.setRequestHeader('Authorization', requestHeader);
        xhr.send(JSON.stringify(attributes));
      }), true);
    }
  };

}).call(this);

},{}],5:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.10.0
(function() {
  var Model, NoSchema, _default, _isArray, _isMap, _toString, castObject, castValue, log, ref, reportCastIgnore,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  log = require('printit')({
    prefix: 'Cozy DB'
  });

  _toString = function(x) {
    return Object.prototype.toString.call(x);
  };

  _isArray = Array.isArray || function(x) {
    return '[object Array]' === _toString(x);
  };

  _isMap = function(x) {
    return '[object Object]' === _toString(x);
  };

  _default = function(value, defaultValue, lastDefault) {
    if (value !== void 0) {
      return value;
    } else if (defaultValue !== void 0) {
      return defaultValue;
    } else {
      return lastDefault;
    }
  };

  exports.NoSchema = NoSchema = {
    symbol: 'NoSchema'
  };

  exports.castValue = castValue = function(value, typeOrOptions) {
    var arrayType, defaultValue, i, item, key, len, out, pvalue, result, type;
    if (typeOrOptions.type) {
      type = typeOrOptions.type;
      defaultValue = typeOrOptions['default'];
    } else {
      type = typeOrOptions;
      defaultValue = void 0;
    }
    if (value === void 0 || value === null) {
      if (_isArray(type)) {
        return [];
      } else {
        return defaultValue;
      }
    }
    if (type === NoSchema) {
      out = value;
    } else if (type === Date) {
      value = _default(value, defaultValue, void 0);
      out = new Date(value);
    } else if (type === String) {
      value = _default(value, defaultValue, void 0);
      out = String(value);
    } else if (type === Boolean) {
      value = _default(value, defaultValue, void 0);
      out = Boolean(value);
    } else if (type === Number) {
      value = _default(value, defaultValue, void 0);
      out = Number(value);
    } else if (type === Object) {
      out = {};
      for (key in value) {
        if (!hasProp.call(value, key)) continue;
        pvalue = value[key];
        out[key] = pvalue;
      }
    } else if (type.prototype instanceof Model) {
      out = type.cast(value);
    } else if (_isArray(type)) {
      if (!type[0]) {
        throw WrongShemaError('empty array');
      }
      value = _default(value, defaultValue, []);
      arrayType = type[0];
      result = [];
      if ((value != null) && typeof value !== 'string') {
        for (i = 0, len = value.length; i < len; i++) {
          item = value[i];
          result.push(castValue(item, arrayType));
        }
      }
      return result;
    } else if (typeof type === 'function') {
      return type(value);
    } else {
      throw WrongShemaError("unsuported type ", type);
    }
    return out;
  };

  reportCastIgnore = ((ref = process.env.NODE_ENV) !== 'production' && ref !== 'test') || process.env.NO_CAST_WARNING;

  exports.castObject = castObject = function(raw, schema, target, name) {
    var handled, prop, typeOrOptions, value;
    if (target == null) {
      target = {};
    }
    handled = [];
    if (schema === NoSchema) {
      for (prop in raw) {
        value = raw[prop];
        target[prop] = value;
      }
      return target;
    }
    for (prop in schema) {
      if (!hasProp.call(schema, prop)) continue;
      typeOrOptions = schema[prop];
      target[prop] = castValue(raw[prop], typeOrOptions);
      if (reportCastIgnore) {
        handled.push(prop);
      }
    }
    if (reportCastIgnore) {
      for (prop in raw) {
        if (!hasProp.call(raw, prop)) continue;
        value = raw[prop];
        if (indexOf.call(handled, prop) < 0) {
          log.warn("Warning : cast ignored property '" + prop + "' on '" + name + "'");
        }
      }
      return target;
    }
  };

  Model = require('../model');

}).call(this);

}).call(this,require('_process'))
},{"../model":3,"_process":8,"printit":7}],6:[function(require,module,exports){
/*
* @version  0.5.0
* @author   Lauri Rooden - https://github.com/litejs/date-format-lite
* @license  MIT License  - http://lauri.rooden.ee/mit-license.txt
*/


!function(Date, proto) {
	var maskRe = /(["'])((?:[^\\]|\\.)*?)\1|YYYY|([MD])\3\3(\3?)|SS|([YMDHhmsW])(\5?)|[uUAZSwo]/g
	, yearFirstRe = /(\d{4})[-.\/](\d\d?)[-.\/](\d\d?)/
	, dateFirstRe = /(\d\d?)[-.\/](\d\d?)[-.\/](\d{4})/
	, timeRe = /(\d\d?):(\d\d):?(\d\d)?\.?(\d{3})?(?:\s*(?:(a)|(p))\.?m\.?)?(\s*(?:Z|GMT|UTC)?(?:([-+]\d\d):?(\d\d)?)?)?/i
	, wordRe = /.[a-z]+/g
	, unescapeRe = /\\(.)/g

	// ISO 8601 specifies numeric representations of date and time.
	//
	// The international standard date notation is
	// YYYY-MM-DD
	//
	// The international standard notation for the time of day is
	// hh:mm:ss
	//
	// Time zone
	//
	// The strings +hh:mm, +hhmm, or +hh (ahead of UTC)
	// -hh:mm, -hhmm, or -hh (time zones west of the zero meridian, which are behind UTC)
	//
	// 12:00Z = 13:00+01:00 = 0700-0500

	Date[proto].format = function(mask) {
		mask = Date.masks[mask] || mask || Date.masks["default"]

		var self = this
		, get = "get" + (mask.slice(0,4) == "UTC:" ? (mask=mask.slice(4), "UTC"):"")

		return mask.replace(maskRe, function(match, quote, text, MD, MD4, single, pad) {
			text = single == "Y"   ? self[get + "FullYear"]() % 100
				 : match == "YYYY" ? self[get + "FullYear"]()
				 : single == "M"   ? self[get + "Month"]()+1
				 : MD     == "M" ? Date.monthNames[ self[get + "Month"]()+(MD4 ? 12 : 0) ]
				 : single == "D"   ? self[get + "Date"]()
				 : MD     == "D" ? Date.dayNames[ self[get + "Day"]() + (MD4 ? 7:0 ) ]
				 : single == "H"   ? self[get + "Hours"]() % 12 || 12
				 : single == "h"   ? self[get + "Hours"]()
				 : single == "m"   ? self[get + "Minutes"]()
				 : single == "s"   ? self[get + "Seconds"]()
				 : match == "S"    ? self[get + "Milliseconds"]()
				 : match == "SS"   ? (quote = self[get + "Milliseconds"](), quote > 99 ? quote : (quote > 9 ? "0" : "00" ) + quote)
				 : match == "u"    ? (self/1000)>>>0
				 : match == "U"    ? +self
				 : match == "A"    ? Date[self[get + "Hours"]() > 11 ? "pm" : "am"]
				 : match == "Z"    ? "GMT " + (-self.getTimezoneOffset()/60)
				 : match == "w"    ? self[get + "Day"]() || 7
				 : single == "W"   ? (quote = new Date(+self + ((4 - (self[get + "Day"]()||7)) * 86400000)), Math.ceil(((quote.getTime()-quote["s" + get.slice(1) + "Month"](0,1)) / 86400000 + 1 ) / 7) )
				 : match == "o"    ? new Date(+self + ((4 - (self[get + "Day"]()||7)) * 86400000))[get + "FullYear"]()
				 : quote           ? text.replace(unescapeRe, "$1")
				 : match
			return pad && text < 10 ? "0"+text : text
		})
	}

	Date.am = "AM"
	Date.pm = "PM"

	Date.masks = {"default":"DDD MMM DD YYYY hh:mm:ss","isoUtcDateTime":'UTC:YYYY-MM-DD"T"hh:mm:ss"Z"'}
	Date.monthNames = "JanFebMarAprMayJunJulAugSepOctNovDecJanuaryFebruaryMarchAprilMayJuneJulyAugustSeptemberOctoberNovemberDecember".match(wordRe)
	Date.dayNames = "SunMonTueWedThuFriSatSundayMondayTuesdayWednesdayThursdayFridaySaturday".match(wordRe)

	//*/


	/*
	* // In Chrome Date.parse("01.02.2001") is Jan
	* n = +self || Date.parse(self) || ""+self;
	*/

	String[proto].date = Number[proto].date = function(format) {
		var m, temp
		, d = new Date
		, n = +this || ""+this

		if (isNaN(n)) {
			// Big endian date, starting with the year, eg. 2011-01-31
			if (m = n.match(yearFirstRe)) d.setFullYear(m[1], m[2]-1, m[3])

			else if (m = n.match(dateFirstRe)) {
				// Middle endian date, starting with the month, eg. 01/31/2011
				// Little endian date, starting with the day, eg. 31.01.2011
				temp = Date.middle_endian ? 1 : 2
				d.setFullYear(m[3], m[temp]-1, m[3-temp])
			}

			// Time
			m = n.match(timeRe) || [0, 0, 0]
			d.setHours( m[6] && m[1] < 12 ? +m[1]+12 : m[5] && m[1] == 12 ? 0 : m[1], m[2], m[3]|0, m[4]|0)
			// Timezone
			if (m[7]) {
				d.setTime(d-((d.getTimezoneOffset() + (m[8]|0)*60 + ((m[8]<0?-1:1)*(m[9]|0)))*60000))
			}
		} else d.setTime( n < 4294967296 ? n * 1000 : n )
		return format ? d.format(format) : d
	}

}(Date, "prototype")





},{}],7:[function(require,module,exports){
(function (process){
// Generated by CoffeeScript 1.10.0
var Logger, colors, dateFormat, levelColors,
  slice = [].slice;

dateFormat = require('./date-format');

module.exports = function(options) {
  return new Logger(options);
};

colors = {
  blue: ['\x1B[34m', '\x1B[39m'],
  cyan: ['\x1B[36m', '\x1B[39m'],
  green: ['\x1B[32m', '\x1B[39m'],
  magenta: ['\x1B[36m', '\x1B[39m'],
  red: ['\x1B[31m', '\x1B[39m'],
  yellow: ['\x1B[33m', '\x1B[39m']
};

levelColors = {
  error: colors.red,
  debug: colors.green,
  warn: colors.yellow,
  info: colors.blue
};

Logger = (function() {
  function Logger(options1) {
    this.options = options1;
    if (this.options == null) {
      this.options = {};
    }
    if (this.options.date && (this.options.dateFormat == null)) {
      this.options.dateFormat = 'YYYY-MM-DD hh:mm:ss:S';
    }
  }

  Logger.prototype.colorify = function(text, color) {
    return "" + color[0] + text + color[1];
  };

  Logger.prototype.stringify = function(text) {
    if (text.stack && text instanceof Error) {
      text = text.stack;
    } else if (text instanceof Object) {
      text = JSON.stringify(text);
    }
    return text;
  };

  Logger.prototype.getFileAndLine = function() {
    var browserReg, fileAndLineInfos, filePath, firstLineStack, line, nodeReg, stacklist;
    stacklist = (new Error()).stack.split('\n').slice(4);
    nodeReg = /at\s+(.*)\s+\((.*):(\d*):(\d*)\)/gi;
    browserReg = /at\s+()(.*):(\d*):(\d*)/gi;
    firstLineStack = stacklist[0];
    fileAndLineInfos = nodeReg.exec(firstLineStack) || browserReg.exec(firstLineStack);
    filePath = fileAndLineInfos[2].substr(process.cwd().length);
    line = fileAndLineInfos[3];
    return "." + filePath + ":" + line + " |";
  };

  Logger.prototype.format = function(level, texts) {
    var date, text;
    if (process.env.DEBUG) {
      texts.unshift(this.getFileAndLine());
    }
    text = ((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = texts.length; i < len; i++) {
        text = texts[i];
        results.push(this.stringify(text));
      }
      return results;
    }).call(this)).join(" ");
    if (this.options.prefix != null) {
      text = this.options.prefix + " | " + text;
    }
    if (process.env.NODE_ENV !== 'production') {
      level = this.colorify(level, levelColors[level]);
    }
    if (level) {
      text = level + " - " + text;
    }
    if (this.options.date) {
      date = new Date().format(this.options.dateFormat);
      text = "[" + date + "] " + text;
    }
    return text;
  };

  Logger.prototype.info = function() {
    var texts;
    texts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (process.env.DEBUG || process.env.NODE_ENV !== 'test') {
      return console.info(this.format('info', texts));
    }
  };

  Logger.prototype.warn = function() {
    var texts;
    texts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (process.env.DEBUG || process.env.NODE_ENV !== 'test') {
      console.info(this.format('warn', texts));
      return console.warn(this.format('warn', texts));
    }
  };

  Logger.prototype.error = function() {
    var texts;
    texts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (process.env.DEBUG || process.env.NODE_ENV !== 'test') {
      console.info(this.format('error', texts));
      return console.error(this.format('error', texts));
    }
  };

  Logger.prototype.debug = function() {
    var texts;
    texts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    if (process.env.DEBUG) {
      return console.info(this.format('debug', texts));
    }
  };

  Logger.prototype.raw = function() {
    var texts;
    texts = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return console.log.apply(console, texts);
  };

  Logger.prototype.lineBreak = function(text) {
    return this.raw(Array(80).join("*"));
  };

  return Logger;

})();

}).call(this,require('_process'))
},{"./date-format":6,"_process":8}],8:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}]},{},[2])(2)
});