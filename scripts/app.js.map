{"version":3,"sources":["app/app.module.coffee","app/scripts/Contact.Fctr.coffee","app/scripts/Cozysdk.Intf.coffee","app/scripts/Home.Ctrl.coffee"],"names":[],"mappings":"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","file":"scripts/app.js","sourcesContent":["appConfig = ($routeProvider) ->\n    for path of routeObject\n        $routeProvider.when path, routeObject[path]\n    $routeProvider.otherwise redirectTo: '/'\n\nangular.module('browserapp', [\n    'ngResource'\n    'ngRoute'\n]).config appConfig\n\nrouteObject = '/':\n    templateUrl: 'partials/home.html'\n    controller: 'HomeAngCtrl'\n    resolve:\n      \tpreGetContacts: (Contact) ->\n        \tpromise = Contact.all()\n        \treturn promise   \n\nappConfig.$inject = [\n    '$routeProvider'\n]","Contact = ($injector, $q) ->\n  \n    CozySdk = $injector.get 'CozySdk'\n    {\n        send: (docType, data) ->\n            promise = CozySdk.create docType, data\n            return promise\n\n        all: () ->\n            promise = CozySdk.defineRequest('Contact', 'all', 'function(doc) { emit(doc.n, null); }').then () ->\n                return CozySdk.runRequest 'Contact', 'all'\n            return promise\n    }\n\nangular.module('browserapp').factory 'Contact', Contact\nContact.$inject = ['$injector', '$q']\n\n# ---","CozySdk = ($rootScope, $q) ->\n    {\n        create: (docType, data) ->\n            deferred = $q.defer()\n            cozysdk.create docType, data, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        find: (id) ->\n            deferred = $q.defer()\n            cozysdk.find id, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        exist: (id) ->\n            deferred = $q.defer()\n            cozysdk.exists id, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        update: (docType, id, user) ->\n            deferred = $q.defer()\n            cozysdk.updateAttributes docType, id, user, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        destroy: (id) ->\n            deferred = $q.defer()\n            cozysdk.destroy id, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                    deferred.reject 'oh no an error! try again'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        defineRequest: (docType, requestName, defined) ->\n            deferred = $q.defer()\n            cozysdk.defineRequest docType, requestName, defined, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                    deferred.reject 'oh no an error! try again'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        destroyRequest: () ->\n            deferred = $q.defer()\n            cozysdk.requestDestroy 'Contact', 'all', {startkey: 'z', endkey: 'z'}, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                    deferred.reject 'oh no an error! try again'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        runRequest: (docType, requestName) ->\n            deferred = $q.defer()\n            cozysdk.run docType, requestName, {}, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                    deferred.reject 'oh no an error! try again'\n                else\n                    res = JSON.parse \"#{res}\"\n                    deferred.resolve res\n            return deferred.promise\n\n    }\n\nangular.module('browserapp').factory 'CozySdk', CozySdk\nCozySdk.$inject = ['$rootScope', '$q']\n\n# ---","HomeAngCtrl = ($injector, $scope, preGetContacts) ->\n\n    Contact = $injector.get 'Contact'\n    CozySdk = $injector.get 'CozySdk'\n\n    res = preGetContacts\n\n    $scope.contacts = res[1]\n\n    updateContactList = () ->\n        promise = Contact.all()\n        promise.then (res) ->\n            $scope.contacts = res[1]\n\n    send = (user) ->\n        promise = Contact.send 'Contact', user\n        promise.then (res) ->\n            updateContactList()\n\n    update = (id, user) ->\n        contactName = n: user.key\n        promise = CozySdk.update 'Contact', id, contactName\n        promise.then (res) ->\n            updateContactList()\n\n    destroy = (id) ->\n        promise = CozySdk.destroy id\n        promise.then (res) ->\n            updateContactList()\n\n    $scope.send = send\n    $scope.update = update\n    $scope.destroy = destroy\n\nangular.module('browserapp').controller 'HomeAngCtrl', HomeAngCtrl\nHomeAngCtrl.$inject = [\n    '$injector'\n    '$scope'\n    'preGetContacts'\n]"]}