{"version":3,"sources":["app/app.module.coffee","app/scripts/Contact.Fctr.coffee","app/scripts/Cozysdk.Intf.coffee","app/scripts/Home.Ctrl.coffee"],"names":[],"mappings":"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","file":"scripts/app.js","sourcesContent":["appConfig = ($routeProvider) ->\n    for path of routeObject\n        $routeProvider.when path, routeObject[path]\n    $routeProvider.otherwise redirectTo: '/'\n\nangular.module('browserapp', [\n    'ngResource'\n    'ngRoute'\n]).config appConfig\n\nrouteObject = '/':\n    templateUrl: 'partials/home.html'\n    controller: 'HomeAngCtrl'\n\nappConfig.$inject = [\n    '$routeProvider'\n]","Contact = ($injector, $q) ->\n  \n    CozySdk = $injector.get 'CozySdk'\n\n    \n    {\n        send: (docType, data) ->\n            CozySdk.create(docType, data).then (res) ->\n                return CozySdk.find res._id\n            return promise\n\n        all: () ->\n            promise = $q.all([\n                CozySdk.defineRequest('Contact', 'all', 'function(doc) { emit(doc.n, null); }'),\n                CozySdk.runRequest('Contact', 'all')\n            ])\n            return promise\n    }\n\nangular.module('browserapp').factory 'Contact', Contact\nContact.$inject = ['$injector', '$q']\n\n# ---","CozySdk = ($rootScope, $q) ->\n  \n    \n    {\n        create: (docType, data) ->\n            deferred = $q.defer()\n            cozysdk.create docType, data, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        find: (id) ->\n            deferred = $q.defer()\n            cozysdk.find id, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                else\n                    callback res\n            return deferred.promise\n\n        exist: (id) ->\n            deferred = $q.defer()\n            cozysdk.exists id, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        update: (docType, id, user) ->\n            deferred = $q.defer()\n            cozysdk.updateAttributes docType, id, user, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        destroy: (id) ->\n            deferred = $q.defer()\n            cozysdk.destroy id, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                    deferred.reject 'oh no an error! try again'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        defineRequest: (docType, requestName, defined) ->\n            deferred = $q.defer()\n            cozysdk.defineRequest docType, requestName, defined, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                    deferred.reject 'oh no an error! try again'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        destroyRequest: () ->\n            deferred = $q.defer()\n            cozysdk.requestDestroy 'Contact', 'all', {startkey: 'z', endkey: 'z'}, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                    deferred.reject 'oh no an error! try again'\n                else\n                    deferred.resolve res\n            return deferred.promise\n\n        runRequest: (docType, requestName) ->\n            deferred = $q.defer()\n            cozysdk.run docType, requestName, {}, (err, res) ->\n                if err?\n                    console.log 'maybe do a cozy special error warning'\n                    deferred.reject 'oh no an error! try again'\n                else\n                    res = JSON.parse \"#{res}\"\n                    deferred.resolve res\n            return deferred.promise\n\n    }\n\nangular.module('browserapp').factory 'CozySdk', CozySdk\nCozySdk.$inject = ['$rootScope', '$q']\n\n# ---","HomeAngCtrl = ($injector, $scope) ->\n\n    Contact = $injector.get('Contact');\n    CozySdk = $injector.get 'CozySdk'\n\n    activate = () ->\n        promise = Contact.all()\n        promise.then (res) ->\n            $scope.contacts = res[1]\n\n    send = (user) ->\n        console.log 'send'\n        Contact.send('Contact', user).then (res) ->\n            $scope.contacts = res\n            activate()\n\n    update = (id, user) ->\n        console.log user\n        contactName = n: user.key\n        console.log contactName\n        CozySdk.update('Contact', id, contactName).then (res) ->\n            $scope.contacts = res\n            activate()\n\n    destroy = (id) ->\n        console.log 'destroy'\n        console.log id\n        CozySdk.destroy(id).then (res) ->\n            $scope.contacts = res\n            activate()\n\n    activate()\n    $scope.send = send\n    $scope.update = update\n    $scope.destroy = destroy\n\nangular.module('browserapp').controller 'HomeAngCtrl', HomeAngCtrl\nHomeAngCtrl.$inject = [\n    '$injector'\n    '$scope'\n]"]}