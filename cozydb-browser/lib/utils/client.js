// Generated by CoffeeScript 1.10.0
var askForToken, playRequest;

askForToken = function() {
  return window.parent.postMessage({
    action: 'getToken'
  }, '*');
};

module.exports = {
  get: function(path, attributes, callback) {
    return playRequest('GET', path, attributes, function(error, body, response) {
      return callback(error, body, response);
    });
  },
  post: function(path, attributes, callback) {
    return playRequest('POST', path, attributes, function(error, body, response) {
      return callback(error, body, response);
    });
  },
  put: function(path, attributes, callback) {
    console.log('put');
    return playRequest('PUT', path, attributes, function(error, body, response) {
      return callback(error, body, response);
    });
  },
  del: function(path, attributes, callback) {
    return playRequest('DELETE', path, attributes, function(error, body, response) {
      return callback(error, body, response);
    });
  }
};

playRequest = function(method, path, attributes, callback) {
  var addListener, auth, eventListening, executeAsynchronously, sendRequest;
  auth = null;
  askForToken();
  eventListening = function(event) {
    window.removeEventListener('message', eventListening);
    return auth = event.data;
  };
  addListener = function() {
    return window.addEventListener('message', eventListening, false);
  };
  sendRequest = function() {
    var xhr;
    xhr = new XMLHttpRequest;
    xhr.open(method, "/ds-api/" + path, true);
    xhr.onload = function() {};
    return callback(null, xhr.response, xhr);
    xhr.onerror = function(e) {
      var err;
      err = 'Request failed : #{e.target.status}';
      return callback(err);
    };
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Authorization', 'Basic ' + btoa(auth.appName + ':' + auth.token));
    if (attributes != null) {
      xhr.send(JSON.stringify(attributes));
    } else {
      xhr.send();
    }
  };
  executeAsynchronously = function(functions, timeout) {
    var i;
    i = 0;
    while (i < functions.length) {
      setTimeout(functions[i], timeout);
      i++;
    }
  };
  return executeAsynchronously([addListener, sendRequest], 10);
};
