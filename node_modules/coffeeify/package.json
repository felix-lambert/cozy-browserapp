{
  "name": "coffeeify",
  "version": "2.0.1",
  "description": "browserify plugin for coffee-script with support for mixed .js and .coffee files",
  "main": "index.js",
  "dependencies": {
    "coffee-script": "^1.10.0",
    "convert-source-map": "^1.1.2",
    "through2": "^2.0.0"
  },
  "devDependencies": {
    "browserify": "^12.0.1",
    "tap": "^2.3.0",
    "through": "^2.3.8"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jnordberg/coffeeify.git"
  },
  "homepage": "https://github.com/jnordberg/coffeeify",
  "keywords": [
    "coffee-script",
    "browserify",
    "v2",
    "js",
    "plugin",
    "transform"
  ],
  "contributors": [
    {
      "name": "James Halliday",
      "email": "mail@substack.net",
      "url": "http://substack.net"
    },
    {
      "name": "Johan Nordberg",
      "email": "code@johan-nordberg.com",
      "url": "http://johan-nordberg.com"
    }
  ],
  "license": "MIT",
  "readme": "# coffeeify [![Build Status](https://travis-ci.org/jnordberg/coffeeify.svg?branch=master)](https://travis-ci.org/jnordberg/coffeeify)\n\nCoffeeScript browserify transform. Mix and match `.coffee` and `.js` files in the same project.\n\n## Example\n\nGiven some files written in a mix of `js` and `coffee`:\n\nfoo.coffee:\n\n```coffee\nconsole.log require './bar.js'\n```\n\nbar.js:\n\n```javascript\nmodule.exports = require('./baz.coffee')(5)\n```\n\nbaz.coffee:\n\n```coffee\nmodule.exports = (n) -> n ** n\n```\n\nInstall coffeeify into your app:\n\n```\n$ npm install coffeeify\n```\n\nWhen you compile your app, just pass `-t coffeeify` to browserify:\n\n```shell\n$ browserify -t coffeeify foo.coffee > bundle.js\n$ node bundle.js\n3125\n```\n\nYou can omit the `.coffee` extension from your requires if you add the extension to browserify's module extensions:\n\n```javascript\nmodule.exports = require('./baz')(5)\n```\n\n```\n$ browserify -t coffeeify --extension=\".coffee\" foo.coffee > bundle.js\n$ node bundle.js\n3125\n```\n\nYou can also pass options to the CoffeeScript compiler:\n\n```\n$ browserify -t [ coffeeify --bare false --header true ] --extension=\".coffee\" foo.coffee\n..\n// Generated by CoffeeScript 1.10.0\n(function() {\n  console.log(require('./bar.js'));\n\n}).call(this);\n..\n```\n\n## Options\n\nName       | Default   | Description\n-----------|-----------|-------------------------------------------------------------------------------------------\nsourceMap  | `null`    | Generate source maps, deteremined from browserify's `--debug` option if not set.\nbare       | `true`    | Omit the `(function(){ .. }).call(this);` wrapper.\nheader     | `false`   | Include the `// Generated by CoffeeScript <version>` header in every file processed.\n\nWhen using browserify programatically options can be passed as an object, example:\n\n```coffee\nbrowserify = require 'browserify'\ncoffeeify = require 'coffeeify'\n\nbundle = browserify\n  extensions: ['.coffee']\n\nbundle.transform coffeeify,\n  bare: false\n  header: true\n\nbundle.add 'foo.coffee'\n\nbundle.bundle (error, result) ->\n  throw error if error?\n  process.stdout.write result\n```\n\n## Install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install coffeeify\n```\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jnordberg/coffeeify/issues"
  },
  "_id": "coffeeify@2.0.1",
  "dist": {
    "shasum": "3faa760ba508709cfb038ca5b585141c2a742885"
  },
  "_from": "coffeeify@",
  "_resolved": "https://registry.npmjs.org/coffeeify/-/coffeeify-2.0.1.tgz"
}
